{"version":3,"sources":["components/Phonebook.js","components/App.js","index.js"],"names":["uuidv4","require","v4","Phonebook","state","contacts","name","number","filter","handleChange","e","currentTarget","value","setState","map","el","alert","contactsData","push","id","onSaveData","preventDefault","props","onSubmit","reset","handleFilterChange","console","log","this","className","onChange","type","pattern","title","required","onClick","disabled","deleteContact","Component","App","formSubmit","data","onFilterChange","disabledBtn","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAGYA,EAAWC,EAAQ,IAAvBC,GAGFC,E,4MACJC,MAAQ,CACNC,SAAU,GACVC,KAAM,GACNC,OAAQ,GACRC,OAAQ,I,EAGVC,aAAe,SAACC,GACd,MAAwBA,EAAEC,cAAlBL,EAAR,EAAQA,KAAMM,EAAd,EAAcA,MACd,EAAKC,UAAS,WACZ,EAAKT,MAAMC,SAASS,KAAI,SAACC,GACnBH,IAAUG,EAAGT,MACfU,MAAM,GAAD,OAAIJ,EAAJ,kCAIX,EAAKC,SAAL,eAAiBP,EAAOM,K,EAE1BK,aAAe,SAACP,GACd,MAAmC,EAAKN,MAAhCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,OAExB,EAAKM,SAAL,eACGR,EAAWA,EAASa,KAAK,CACxBC,GAAInB,IACJM,KAAMA,EACNC,OAAQA,EACRC,OAAQ,Q,EAOdY,WAAa,SAACV,GACZA,EAAEW,iBACF,EAAKC,MAAMC,SAAS,EAAKnB,OACzB,EAAKoB,S,EAGPA,MAAQ,WACN,EAAKX,SAAS,CAAEP,KAAM,GAAIC,OAAQ,M,EAGpCkB,mBAAqB,SAACf,GACpB,MAAwBA,EAAEC,cAAlBL,EAAR,EAAQA,KAAMM,EAAd,EAAcA,MACd,EAAKC,SAAL,eAAiBP,EAAOM,IAExB,EAAKC,UAAS,WACZ,EAAKT,MAAMC,SAASS,KAAI,SAACC,GACvBW,QAAQC,IAAIf,GACRA,IAAUG,EAAGT,MACfoB,QAAQC,IAAI,a,4CAMpB,WAAU,IAAD,OACP,EAAiCC,KAAKxB,MAA9BE,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAAQC,EAAtB,EAAsBA,OAKtB,OACE,sBAAKqB,UAAU,YAAf,UACE,oBAAIA,UAAU,SAAd,uBACA,uBAAMN,SAAUK,KAAKR,WAArB,UACE,yCAEE,uBACES,UAAU,QACVjB,MAAON,EACPwB,SAAUF,KAAKnB,aACfU,GAAInB,IACJ+B,KAAK,OACLzB,KAAK,OACL,cAAY,OACZ0B,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,2CAEE,uBACEL,UAAU,QACVC,SAAUF,KAAKnB,aACfU,GAAInB,IACJY,MAAOL,EACPwB,KAAK,MACL,cAAY,SACZzB,KAAK,SACL0B,QAAQ,yFACRC,MAAM,+iBACNC,UAAQ,OAGZ,wBACEL,UAAU,SACVE,KAAK,SACL,cAAY,MACZI,QAASP,KAAKX,aACdmB,UAAW7B,IAAWD,EALxB,4BAWF,gCACE,0CACA,0DAEE,uBACEyB,KAAK,OACLzB,KAAK,SACLM,MAAOJ,EACPsB,SAAUF,KAAKH,wBAGnB,6BACGG,KAAKxB,MAAMC,SAASS,KAAI,SAACC,GACxB,OACE,qBAAII,GAAInB,IAAyB6B,UAAU,WAA3C,UACGd,EAAGT,KACJ,sCAASS,EAAGR,UACZ,wBACEY,GAAInB,IAEJmC,QAAS,EAAKE,cAHhB,mBAEOrC,OALcA,oB,GA3HfsC,aA8ITnC,IC/IToC,E,4MACJnC,MAAQ,CACNC,SAAU,I,EAKZmC,WAAa,SAACC,K,EAIdC,eAAiB,SAAChC,GAChB,EAAKG,SAAS,CAAEL,OAAQE,EAAEC,cAAcC,S,4CAG1C,WAOE,OACE,mCACE,cAAC,EAAD,CACEW,SAAUK,KAAKY,WACfG,YAAaf,KAAKe,oB,GA1BVL,aA8CHC,I,MC7CfK,IAASC,OACP,cAAC,IAAMC,WAAP,UAAmB,cAAC,EAAD,MACnBC,SAASC,eAAe,W","file":"static/js/main.9847de4d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Phonebook.scss\";\n// import { parse as uuidParse } from \"uuid\";\nconst { v4: uuidv4 } = require(\"uuid\");\n\n// ======\nclass Phonebook extends Component {\n  state = {\n    contacts: [],\n    name: \"\",\n    number: \"\",\n    filter: \"\",\n  };\n\n  handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n    this.setState(() => {\n      this.state.contacts.map((el) => {\n        if (value === el.name) {\n          alert(`${value} is already in contacts`);\n        }\n      });\n    });\n    this.setState({ [name]: value });\n  };\n  contactsData = (e) => {\n    const { contacts, name, number } = this.state;\n\n    this.setState({\n      [contacts]: contacts.push({\n        id: uuidv4(),\n        name: name,\n        number: number,\n        filter: \"\",\n      }),\n    });\n  };\n  // comparisonByName = (e){\n\n  // }\n  onSaveData = (e) => {\n    e.preventDefault();\n    this.props.onSubmit(this.state); // отпарвка данных\n    this.reset(); // очищение формы\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  handleFilterChange = (e) => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n\n    this.setState(() => {\n      this.state.contacts.map((el) => {\n        console.log(value);\n        if (value === el.name) {\n          console.log(\"hi\");\n        }\n      });\n    });\n  };\n\n  render() {\n    const { name, number, filter } = this.state;\n    // const normalizeFilter = this.state.filter.toLowerCase();\n    // const visibleContacts = this.state.contacts.filter((el) => {\n    //   return el.name.toLowerCase().includes(normalizeFilter);\n    // });\n    return (\n      <div className=\"container\">\n        <h1 className=\"header\">Phonebook</h1>\n        <form onSubmit={this.onSaveData}>\n          <label>\n            Name\n            <input\n              className=\"input\"\n              value={name}\n              onChange={this.handleChange}\n              id={uuidv4()}\n              type=\"text\"\n              name=\"name\"\n              data-action=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </label>\n          <label>\n            Number\n            <input\n              className=\"input\"\n              onChange={this.handleChange}\n              id={uuidv4()}\n              value={number}\n              type=\"tel\"\n              data-action=\"number\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять из цифр, и может содержать пробелы, тире, круглые скобки, и может начинаться с +\"\n              required\n            />\n          </label>\n          <button\n            className=\"addBtn\"\n            type=\"submit\"\n            data-action=\"add\"\n            onClick={this.contactsData}\n            disabled={!number || !name}\n          >\n            Add contact\n          </button>\n        </form>\n\n        <div>\n          <h2>Contacts</h2>\n          <label>\n            Find contacts by name\n            <input\n              type=\"text\"\n              name=\"filter\"\n              value={filter}\n              onChange={this.handleFilterChange}\n            ></input>\n          </label>\n          <ul>\n            {this.state.contacts.map((el) => {\n              return (\n                <li id={uuidv4()} key={uuidv4()} className=\"contacts\">\n                  {el.name}\n                  <span>: {el.number}</span>\n                  <button\n                    id={uuidv4()}\n                    key={uuidv4()}\n                    onClick={this.deleteContact}\n                  >\n                    Delete\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Phonebook;\n// deleteContact = (e) => {\n//   const { contacts } = this.state;\n//   this.setState(() => {\n//     console.log(e.target.parentNode.name.textContent);\n//     // console.log(this.state.contacts);\n//     contacts.map((el) => {\n//       if (e.target.parentNode === el.name) {\n//         console.log(el.name, \"name\");\n//       }\n//     });\n//   });\n// };\n","import React, { Component } from \"react\";\nimport Phonebook from \"./Phonebook\";\n// import Filter from \"./Filter\";\n// const { v4: uuidv4 } = require(\"uuid\");\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    // name: \"\",\n    // number: \"\",\n    // filter: \"\",\n  };\n  formSubmit = (data) => {\n    // console.log(data, \"dta\");\n  };\n\n  onFilterChange = (e) => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  render() {\n    // const normalizeFilter = this.state.filter.toLowerCase();\n    // const visibleContacts = this.state.contacts.filter((el) => {\n    // return el.name.toLowerCase().includes(normalizeFilter);\n    // });\n\n    // const { filter } = this.state;\n    return (\n      <>\n        <Phonebook\n          onSubmit={this.formSubmit}\n          disabledBtn={this.disabledBtn}\n          // props={visibleContacts}\n        />\n        {/* <Filter\n          props={visibleContacts}\n          filterChange={this.onFilterChange}\n          filter={this.state.filter}\n        /> */}\n        {/* <label>\n          Find contacts by name\n          <input\n            type=\"text\"\n            value={filter}\n            onChange={this.onFilterChange}\n          ></input>\n        </label> */}\n      </>\n    );\n  }\n}\nexport default App;\n\n// export default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"modern-normalize/modern-normalize.css\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>{<App />}</React.StrictMode>,\n  document.getElementById(\"root\")\n);\n// import \"./index.css\";\n// import App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}